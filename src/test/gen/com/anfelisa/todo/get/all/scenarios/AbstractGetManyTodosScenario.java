/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/




package com.anfelisa.todo.get.all.scenarios;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.acegen.BaseScenario;
import de.acegen.ITimelineItem;
import de.acegen.NonDeterministicDataProvider;
import de.acegen.HttpResponse;

@SuppressWarnings("unused")
public abstract class AbstractGetManyTodosScenario extends BaseScenario {

	static final Logger LOG = LoggerFactory.getLogger(AbstractGetManyTodosScenario.class);
	
	private void given() throws Exception {
		String uuid;
		
		if (prerequisite("CreateCategory")) {
			uuid = this.randomUUID();
			com.anfelisa.todo.data.CreateCategoryPayload payload_0 = objectMapper.readValue("{" +
				"\"categoryId\" : \"category_" + this.getTestId() + "\"} ",
					com.anfelisa.todo.data.CreateCategoryPayload.class);
			com.anfelisa.todo.data.CategoryData data_0 = objectMapper.readValue("{" +
			"\"uuid\" : \"" + uuid + "\"," + 
			"\"categoryId\" : \"category_" + this.getTestId() + "\"} ",
					com.anfelisa.todo.data.CategoryData.class);
			HttpResponse<Object> response_0 = 
			this.httpPost(
				"/category/create", 
			 	payload_0,
				null,
				uuid,
				null
			);
			
			if (response_0.getStatusCode() >= 400) {
				String message = "GIVEN CreateCategory fails\n" + response_0.getStatusMessage();
				LOG.error("GIVEN: CreateCategory fails due to {} in {} ms", message, response_0.getDuration());
				assertFail(message);
			}
			LOG.info("GIVEN: CreateCategory success in {} ms", response_0.getDuration());
			addToMetrics("CreateCategory", response_0.getDuration());
		} else {
			LOG.info("GIVEN: prerequisite for CreateCategory not met");
		}

		for (int i=0; i<20; i++) {
			if (prerequisite("CreateRandomTodo")) {
				uuid = this.randomUUID();
				com.anfelisa.todo.data.CreateTodoPayload payload_1 = objectMapper.readValue("{" +
					"\"description\" : \"" + this.randomString() + " " + this.getTestId() + "\"," + 
					"\"categoryId\" : \"category_" + this.getTestId() + "\"} ",
						com.anfelisa.todo.data.CreateTodoPayload.class);
				com.anfelisa.todo.data.TodoData data_1 = objectMapper.readValue("{" +
				"\"uuid\" : \"" + uuid + "\"," + 
				"\"description\" : \"" + this.randomString() + " " + this.getTestId() + "\"," + 
				"\"categoryId\" : \"category_" + this.getTestId() + "\"} ",
						com.anfelisa.todo.data.TodoData.class);
				HttpResponse<Object> response_1 = 
				this.httpPost(
					"/todos/create", 
				 	payload_1,
					null,
					uuid,
					null
				);
				
				if (response_1.getStatusCode() >= 400) {
					String message = "GIVEN CreateRandomTodo fails\n" + response_1.getStatusMessage();
					LOG.error("GIVEN: CreateRandomTodo fails due to {} in {} ms", message, response_1.getDuration());
					assertFail(message);
				}
				LOG.info("GIVEN: CreateRandomTodo success in {} ms", response_1.getDuration());
				addToMetrics("CreateTodo", response_1.getDuration());
			} else {
				LOG.info("GIVEN: prerequisite for CreateRandomTodo not met");
			}
		}

	}
	
	private HttpResponse<com.anfelisa.todo.data.GetAllTodosResponse> when() throws Exception {
		String uuid = this.randomUUID();
		com.anfelisa.todo.data.TodoListData data_0 = objectMapper.readValue("{" +
		"\"uuid\" : \"" + uuid + "\"," + 
		"\"categoryId\" : \"category_" + this.getTestId() + "\"} ",
				com.anfelisa.todo.data.TodoListData.class);
		HttpResponse<com.anfelisa.todo.data.GetAllTodosResponse> response = 
		this.httpGet(
			"/todos/all?categoryId=" + data_0.getCategoryId() + "", 
			null,
			uuid,
			com.anfelisa.todo.data.GetAllTodosResponse.class
		);
		
		LOG.info("WHEN: GetAllTodos finished in {} ms", response.getDuration());
		if (response.getStatusCode() >= 200 && response.getStatusCode() < 300) {
			addToMetrics("GetAllTodos", response.getDuration());
		}
		return response;
	}
	
	private com.anfelisa.todo.data.GetAllTodosResponse then(HttpResponse<com.anfelisa.todo.data.GetAllTodosResponse> response) throws Exception {
		if (response.getStatusCode() == 500) {
			LOG.error("THEN: status " + response.getStatusCode() + " failed: " + response.getStatusMessage());
			assertFail(response.getStatusMessage());
		}
		if (response.getStatusCode() != 200) {
			LOG.error("THEN: status " + response.getStatusCode() + " failed, expected 200: " + response.getStatusMessage());
			assertFail(response.getStatusMessage());
		} else {
			LOG.info("THEN: status 200 passed");
		}
		
				com.anfelisa.todo.data.GetAllTodosResponse actual = null;
				if (response.getStatusCode() < 400) {
					try {
						actual = response.getEntity();
						
					} catch (Exception x) {
						LOG.error("THEN: failed to read response", x);
						assertFail(x.getMessage());
					}

				}

				return actual;
	}
			
	@Override
	public void runTest() throws Exception {
		given();
			
		if (prerequisite("GetManyTodos")) {
			HttpResponse<com.anfelisa.todo.data.GetAllTodosResponse> response = when();

			com.anfelisa.todo.data.GetAllTodosResponse actualResponse = then(response);
			
	
			atLeastTwentyReturned(actualResponse);
		} else {
			LOG.info("WHEN: prerequisite for GetManyTodos not met");
		}
	}
	
	protected abstract void atLeastTwentyReturned(com.anfelisa.todo.data.GetAllTodosResponse response);
	
		
	@Override
	protected String scenarioName() {
		return "GetManyTodos";
	}
	
}



/******* S.D.G. *******/



