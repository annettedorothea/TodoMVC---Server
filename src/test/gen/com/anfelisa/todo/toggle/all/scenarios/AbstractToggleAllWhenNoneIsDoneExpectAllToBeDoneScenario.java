/********************************************************************************
 * generated by de.acegen 1.0.2
 ********************************************************************************/




package com.anfelisa.todo.toggle.all.scenarios;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.acegen.BaseScenario;
import de.acegen.ITimelineItem;
import de.acegen.NonDeterministicDataProvider;
import de.acegen.HttpResponse;

@SuppressWarnings("unused")
public abstract class AbstractToggleAllWhenNoneIsDoneExpectAllToBeDoneScenario extends BaseScenario {

	static final Logger LOG = LoggerFactory.getLogger(AbstractToggleAllWhenNoneIsDoneExpectAllToBeDoneScenario.class);
	
	private void given() throws Exception {
		String uuid;
		
		if (prerequisite("CreateTodo")) {
			uuid = "" + this.getTestId() + "";
			this.callNonDeterministicDataProviderPutSystemTime(uuid, LocalDateTime.parse("20200707 16:30", DateTimeFormatter.ofPattern("yyyyMMdd HH:mm")));
			com.anfelisa.todo.data.CreateTodoPayload payload_0 = objectMapper.readValue("{" +
				"\"description\" : \"todo " + this.getTestId() + "\"} ",
					com.anfelisa.todo.data.CreateTodoPayload.class);
			com.anfelisa.todo.data.TodoData data_0 = objectMapper.readValue("{" +
			"\"uuid\" : \"" + uuid + "\"," + 
			"\"description\" : \"todo " + this.getTestId() + "\"} ",
					com.anfelisa.todo.data.TodoData.class);
			HttpResponse<com.anfelisa.todo.data.CreateTodoResponse> response_0 = 
			this.httpPost(
				"/todos/create", 
			 	payload_0,
				null,
				uuid,
				com.anfelisa.todo.data.CreateTodoResponse.class
			);
			
			if (response_0.getStatusCode() >= 400) {
				String message = "GIVEN CreateTodo fails\n" + response_0.getStatusMessage();
				LOG.error("GIVEN: CreateTodo fails due to {} in {} ms", message, response_0.getDuration());
				assertFail(message);
			}
			LOG.info("GIVEN: CreateTodo success in {} ms", response_0.getDuration());
			addToMetrics("CreateTodo", response_0.getDuration());
			com.anfelisa.todo.data.CreateTodoResponse responseEntity_0 = null;
			try {
				
				Object todoId = this.extractTodoId(response_0.getEntity());
				extractedValues.put("todoId", todoId);
				LOG.info("GIVEN: extracted " + todoId.toString()  + " as todoId");
				
				Object createdDateTime = this.extractCreatedDateTime(response_0.getEntity());
				extractedValues.put("createdDateTime", createdDateTime);
				LOG.info("GIVEN: extracted " + createdDateTime.toString()  + " as createdDateTime");
				
				Object description = this.extractDescription(response_0.getEntity());
				extractedValues.put("description", description);
				LOG.info("GIVEN: extracted " + description.toString()  + " as description");
			} catch (Exception x) {
				LOG.error("GIVEN: failed to extract values from response ", x);
			}
		} else {
			LOG.info("GIVEN: prerequisite for CreateTodo not met");
		}

		if (prerequisite("CreateSecondTodo")) {
			uuid = "" + this.getTestId() + "_2";
			this.callNonDeterministicDataProviderPutSystemTime(uuid, LocalDateTime.parse("20200707 16:30", DateTimeFormatter.ofPattern("yyyyMMdd HH:mm")));
			com.anfelisa.todo.data.CreateTodoPayload payload_1 = objectMapper.readValue("{" +
				"\"description\" : \"todo 2 " + this.getTestId() + "\"} ",
					com.anfelisa.todo.data.CreateTodoPayload.class);
			com.anfelisa.todo.data.TodoData data_1 = objectMapper.readValue("{" +
			"\"uuid\" : \"" + uuid + "\"," + 
			"\"description\" : \"todo 2 " + this.getTestId() + "\"} ",
					com.anfelisa.todo.data.TodoData.class);
			HttpResponse<com.anfelisa.todo.data.CreateTodoResponse> response_1 = 
			this.httpPost(
				"/todos/create", 
			 	payload_1,
				null,
				uuid,
				com.anfelisa.todo.data.CreateTodoResponse.class
			);
			
			if (response_1.getStatusCode() >= 400) {
				String message = "GIVEN CreateSecondTodo fails\n" + response_1.getStatusMessage();
				LOG.error("GIVEN: CreateSecondTodo fails due to {} in {} ms", message, response_1.getDuration());
				assertFail(message);
			}
			LOG.info("GIVEN: CreateSecondTodo success in {} ms", response_1.getDuration());
			addToMetrics("CreateTodo", response_1.getDuration());
		} else {
			LOG.info("GIVEN: prerequisite for CreateSecondTodo not met");
		}

	}
	
	private HttpResponse<Object> when() throws Exception {
		String uuid = this.randomUUID();
		this.callNonDeterministicDataProviderPutSystemTime(uuid, LocalDateTime.parse("20200707 17:20", DateTimeFormatter.ofPattern("yyyyMMdd HH:mm")));
		com.anfelisa.todo.data.ToggleAllData data_0 = objectMapper.readValue("{" +
		"\"uuid\" : \"" + uuid + "\" }",
		com.anfelisa.todo.data.ToggleAllData.class);
		HttpResponse<Object> response = 
		this.httpPut(
			"/todos/toggle-all", 
		 	null,
			null,
			uuid,
			null
		);
		
		LOG.info("WHEN: ToggleAll finished in {} ms", response.getDuration());
		if (response.getStatusCode() >= 200 && response.getStatusCode() < 300) {
			addToMetrics("ToggleAll", response.getDuration());
		}
		return response;
	}
	
	private void then(HttpResponse<Object> response) throws Exception {
		if (response.getStatusCode() == 500) {
			LOG.error("THEN: status " + response.getStatusCode() + " failed: " + response.getStatusMessage());
			assertFail(response.getStatusMessage());
		}
		if (response.getStatusCode() != 200) {
			LOG.error("THEN: status " + response.getStatusCode() + " failed, expected 200: " + response.getStatusMessage());
			assertFail(response.getStatusMessage());
		} else {
			LOG.info("THEN: status 200 passed");
		}
		
	}
			
	@Override
	public void runTest() throws Exception {
		given();
			
		if (prerequisite("ToggleAllWhenNoneIsDoneExpectAllToBeDone")) {
			HttpResponse<Object> response = when();

			then(response);
			
			this.todoIsDone();
			this.secondTodoIsDone();
	
		} else {
			LOG.info("WHEN: prerequisite for ToggleAllWhenNoneIsDoneExpectAllToBeDone not met");
		}
	}
	
	
	private void todoIsDone() throws Exception {
		com.anfelisa.todo.models.ITodoModel actual = daoProvider.getTodoDao().selectByPrimaryKey(handle, "" + this.getTestId() + "");
		
		com.anfelisa.todo.models.ITodoModel expected = objectMapper.readValue("{" +
			"\"createdDateTime\" : \"2020-07-07T16:30\"," + 
			"\"description\" : \"todo " + this.getTestId() + "\"," + 
			"\"done\" : true," + 
			"\"id\" : \"" + this.getTestId() + "\"," + 
			"\"updatedDateTime\" : \"2020-07-07T17:20\"} ",
		com.anfelisa.todo.models.TodoModel.class);
		assertThat(actual, expected);
	
		LOG.info("THEN: todoIsDone passed");
	}
	private void secondTodoIsDone() throws Exception {
		com.anfelisa.todo.models.ITodoModel actual = daoProvider.getTodoDao().selectByPrimaryKey(handle, "" + this.getTestId() + "_2");
		
		com.anfelisa.todo.models.ITodoModel expected = objectMapper.readValue("{" +
			"\"createdDateTime\" : \"2020-07-07T16:30\"," + 
			"\"description\" : \"todo 2 " + this.getTestId() + "\"," + 
			"\"done\" : true," + 
			"\"id\" : \"" + this.getTestId() + "_2\"," + 
			"\"updatedDateTime\" : \"2020-07-07T17:20\"} ",
		com.anfelisa.todo.models.TodoModel.class);
		assertThat(actual, expected);
	
		LOG.info("THEN: secondTodoIsDone passed");
	}
		
	@Override
	protected String scenarioName() {
		return "ToggleAllWhenNoneIsDoneExpectAllToBeDone";
	}
	
}



/******* S.D.G. *******/



