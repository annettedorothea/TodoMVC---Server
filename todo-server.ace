HttpServer Java Dropwizard JDBI3 Liquibase


com.anfelisa.todo
ACE 
	GetAllTodos<TodoList> 
		GET "/todos/all"
		response todoList
	
	GetTodo<Todo> 
		GET "/todos/{id}"
			pathParams id
		response 
			id
			description
			createdDateTime
			done
			updatedDateTime
	
	CreateTodo<Todo>
		POST "/todos/create"
		payload description
		response 
			id
			createdDateTime
			description
		on success (Todo.create) 
	
	ToggleTodo<TodoToggle> 
		PUT "/todos/toggle" 
		queryParams id
		on success ( Todo.toggle )
	
	ToggleAll<ToggleAll>
		PUT "/todos/toggle-all" 
		on success ( Todo.toggleAll )
	
	UpdateTodo<Todo>
		PUT "/todos/update" 
		payload id description  
		on success (Todo.update)
	
	DeleteTodo<TodoId> 
		DELETE "/todos/delete" 
		queryParams id 
		on success (Todo.delete)
	
	ClearDone<ClearDone> 
		DELETE "/todos/clear-done" 
		on success (Todo.clearDone) 
		
views 
	Todo {
		create(Todo)
		toggle(TodoToggle)
		toggleAll(ToggleAll)
		delete(TodoId)
		update(Todo)
		clearDone(ClearDone)
	}

models 
	persistent Todo {
		Unique PrimaryKey NotNull String id
		NotNull String description
		NotNull Boolean done
		DateTime createdDateTime
		DateTime updatedDateTime
	}
	
	TodoList {
		List Todo todoList
	}
	
	TodoId {
		NotNull String id
	}

	TodoToggle {
		NotNull String id
		NotNull Boolean done
		Todo todoToBeToggled
		DateTime updatedDateTime
	}

	ToggleAll {
		NotNull Boolean done
		List Todo todosToBeToggled
		DateTime updatedDateTime
	}
	
	ClearDone {}
	
scenarios 


CreateTodo
	WHEN CreateTodo
		uuid "${testId}"
		systemTime "20200707 16:30" "yyyyMMdd HH:mm" {
			description: "todo ${testId}"
		}
	THEN 200
		persistence todoWasCreated Todo selectByPrimaryKey (id: "${testId}") shouldBe {
			createdDateTime: "20200707 16:30" "yyyyMMdd HH:mm",
			description: "todo ${testId}",
			done: false,
			id: "${testId}",
			updatedDateTime: null
		}
		
GetAllTodos
	GIVEN CreateTodo
	WHEN GetAllTodos
	THEN 200
		response shouldBe {
			todoList: [
				{
					createdDateTime: "20200707 16:30" "yyyyMMdd HH:mm",
					description: "todo ${testId}",
					done: false,
					id: "${testId}",
					updatedDateTime: null
				}
			]
		}


CreateRandomTodo
	WHEN CreateTodo {
			description: "${random} ${testId}"
		}
		extract todoId
		extract createdDateTime
		extract description
	THEN 200
	
	
	
	
GetTodo
	GIVEN CreateRandomTodo
	WHEN GetTodo {
		id: "${todoId}"
	}
	THEN 200
	response shouldBe {
		createdDateTime: "${createdDateTime}" "yyyy-MM-dd'T'HH:mm:ss.SSS",
		description: "${description}",
		done: false,
		id: "${todoId}"
	}

GetManyTodos
	GIVEN CreateRandomTodo 20x
	WHEN GetAllTodos
	THEN 200
	verifications atLeastTwentyReturned
		
	
ToggleTodo 
	GIVEN CreateTodo
	WHEN ToggleTodo 
		systemTime "20200707 17:20" "yyyyMMdd HH:mm" {
			id: "${testId}"
		}
	THEN 200
		persistence todoWasToggled Todo selectByPrimaryKey (id: "${testId}") shouldBe {
			createdDateTime: "20200707 16:30" "yyyyMMdd HH:mm",
			description: "todo ${testId}",
			done: true,
			id: "${testId}",
			updatedDateTime: "20200707 17:20" "yyyyMMdd HH:mm"
		}

ToggleTodoTwice 
	GIVEN 
		CreateTodo
		ToggleTodo
	WHEN ToggleTodo 
		systemTime "20200707 17:30" "yyyyMMdd HH:mm" {
			id: "${testId}"
		}
	THEN 200
		persistence todoWasToggled Todo selectByPrimaryKey (id: "${testId}") shouldBe {
			createdDateTime: "20200707 16:30" "yyyyMMdd HH:mm",
			description: "todo ${testId}",
			done: false,
			id: "${testId}",
			updatedDateTime: "20200707 17:30" "yyyyMMdd HH:mm"
		}
	


	
	
		

